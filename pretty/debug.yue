#!/usr/bin/env yue
--- SPDX-License-Identifier: 0BSD

from _G import require, debug, rawget, rawset, getmetatable, setmetatable, tostring, type, error, table, os

import "pretty.util"


export class CallStack
	new: (level=0) =>
		level += 2

		local length = 0

		const max_allowed_depth = 100
		for i = 1, max_allowed_depth + 1
			if i > max_allowed_depth
				error("The maximum allowed function call-stack depth of #{max_allowed_depth} has been exceeded!")

			const temp = debug.getinfo(level + i)

			if temp == nil
				break

			length += 1
			rawset(@, length, temp)

		rawset(@, "length", length)


	__index: (key) =>
		const type_of_key = type(key)

		if type_of_key == "number"
			error("Index out of range! (expected 1..#{rawget(@, 'length')}, got: #{key})")
		elseif key in ["n", "count", "size"]
			rawget(@, "length")
		else
			const value_in_base = @.<>[key]
			if value_in_base? 
				value_in_base
			else
				const key_string = if type_of_key == "string"
					"%q"::format(key)
				else
					tostring(key)

				error("Invalid key #{key_string}!")

	__newindex: (key, value) =>
		error("Attempted to insert a value into a CallStack-instance, which is immutable!")

	__call: do
		local index = 0

		() =>
			index += 1

			if index > @length
				index = 0
				return

			const value = @[index]
			index, value


export get_traceback = (message, level=0) ->
	level += 1

	const call_stack = CallStack(level)

	local traceback = do
		const format_entry = (index, entry) ->
			const { :name = '<anonymous>' } = entry
			const padding = " "::rep(
				math.ceil(math.log10(call_stack.length + 1)) -
				math.ceil(math.log10(index + 1))
			)
			" #{padding}#{index} | #{name}"

		table.concat(
			[format_entry(index, entry) for index, entry in call_stack]
			"\n"
		)

	if message?
		traceback = (
			message ..
			"\n------------\n" ..
			traceback
		)

	traceback


export main = (argv=arg) ->
	f = -> _ = print(get_traceback("Hello, world!", -4) .. "\n\n")
	g = -> _ = f!
	h = -> _ = g!

	_ = [f!, g!, h!]


if select("#", ...) == 0
	os.exit(main())
