#!/usr/bin/env yue
--- SPDX-License-Identifier: 0BSD

from _G import type, error, assert, print, tostring, ipairs, io, os, debug, table, string, getmetatable, setmetatable


--[[
https://en.m.wikipedia.org/wiki/Box-drawing_characters#Box_Drawing

      	0	1	2	3	4	5	6	7	8	9	A	B	C	D	E	F
U+250x	─	━	│	┃	┄	┅	┆	┇	┈	┉	┊	┋	┌	┍	┎	┏
U+251x	┐	┑	┒	┓	└	┕	┖	┗	┘	┙	┚	┛	├	┝	┞	┟
U+252x	┠	┡	┢	┣	┤	┥	┦	┧	┨	┩	┪	┫	┬	┭	┮	┯
U+253x	┰	┱	┲	┳	┴	┵	┶	┷	┸	┹	┺	┻	┼	┽	┾	┿
U+254x	╀	╁	╂	╃	╄	╅	╆	╇	╈	╉	╊	╋	╌	╍	╎	╏
U+255x	═	║	╒	╓	╔	╕	╖	╗	╘	╙	╚	╛	╜	╝	╞	╟
U+256x	╠	╡	╢	╣	╤	╥	╦	╧	╨	╩	╪	╫	╬	╭	╮	╯
U+257x	╰	╱	╲	╳	╴	╵	╶	╷	╸	╹	╺	╻	╼	╽	╾	╿
--]]
--- The keys are strings representing which sides the cosrosponding character
--- is connected to, and in what style: [l]eft, [r]ight, [t]op and [b]ottom
--- for the direction(s), optionally followed by one of the style indicators
--- [N]ormal, [B]old, [D]ouble or [S]mooth. If the style indicator is followed
--- by a number between 2 and 4, it means that it is a dashed / dotted symbol
--- instead of a complete / unobstructed line, with that amount of sections.
--- Each direction is seperated by an underscore. They are sorted as cardinal
--- directions, so the order is top, right, bottom and then left.
---
--- TODO: Complete this character set.
const charset = {
	t:       "╵"
	t_r:     "└"
	t_b:     "│"
	t_r_b:   "├"
	t_r_b_l: "┼"
	t_l:     "┘"
	t_b_l:   "┤"
	r:   "╶"
	r_b: "┌"
	r_l: "─"
	b:   "╷"
	b_l: "┐"
	l:   "╴"

	tB:    "╹"
	t_rB:  "┕"
	tB_r:  "┖"
	tB_rB: "┗"
	t_bB:  "╽"
	tB_b:  "╿"
	tB_bB: "┃"
	t_lB:  "┙"
	tB_l:  "┚"
	tB_lB: "┛"
	r:   "╶"
	r_b: "┌"
	r_l: "─"
	b:   "╷"
	b_l: "┐"
	l:   "╴"
}

---@alias BoxCharStyle
---| nil
---| true
---| "normal"
---| "bold"
---| "double"
---| "smooth"
---| 2
---| 3
---| 4
--- TODO: Complete this function, after finishing `charset`.
---@param styles { top: BoxCharStyle, right: BoxCharStyle, bottom: BoxCharStyle, left: BoxCharStyle }
---@return string
export get_box_char = (styles={}) ->
	assert(type(styles) == "table")

	if next(styles, nil) == nil
		return " "

	local key_parts = ["", "", "", ""]

	for i, side in ipairs(["top", "right", "bottom", "left"])
		const style = styles[side]

		switch style
			when nil
				-- pass
			when true
				key_parts[i] = side::sub(1, 1)
			when "normal"
				error("TODO: Implement style == \"normal\" for get_box_char()")
			when "bold"
				error("TODO: Implement style == \"bold\" for get_box_char()")
			when "double"
				error("TODO: Implement style == \"double\" for get_box_char()")
			when "smooth"
				error("TODO: Implement style == \"smooth\" for get_box_char()")
			when 2
				error("TODO: Implement style == 2 for get_box_char()")
			when 3
				error("TODO: Implement style == 3 for get_box_char()")
			when 4
				error("TODO: Implement style == 4 for get_box_char()")
			else
				error("Invalid box character style %q!"::format(
					tostring(style)
				))

	assert(charset[table.concat(
		[i for i in *key_parts when i != ""],
		"_",
	)])


export main = (argv=arg) ->
	print("Hello from %q:%d"::format($FILE, $LINE))

	for k, v in pairs(charset)
		print(k, v)


if select("#", ...) == 0
	os.exit(main())
