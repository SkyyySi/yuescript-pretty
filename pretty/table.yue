#!/usr/bin/env yue
--- SPDX-License-Identifier: 0BSD

from _G import type, error, assert, print, tostring, ipairs, io, os, debug, table, string, getmetatable, setmetatable

from "pretty.util" import get_utf8_chars, get_utf8_length, get_char_display_width



--[[
https://en.m.wikipedia.org/wiki/Box-drawing_characters#Box_Drawing

      	0	1	2	3	4	5	6	7	8	9	A	B	C	D	E	F
U+250x	─	━	│	┃	┄	┅	┆	┇	┈	┉	┊	┋	┌	┍	┎	┏
U+251x	┐	┑	┒	┓	└	┕	┖	┗	┘	┙	┚	┛	├	┝	┞	┟
U+252x	┠	┡	┢	┣	┤	┥	┦	┧	┨	┩	┪	┫	┬	┭	┮	┯
U+253x	┰	┱	┲	┳	┴	┵	┶	┷	┸	┹	┺	┻	┼	┽	┾	┿
U+254x	╀	╁	╂	╃	╄	╅	╆	╇	╈	╉	╊	╋	╌	╍	╎	╏
U+255x	═	║	╒	╓	╔	╕	╖	╗	╘	╙	╚	╛	╜	╝	╞	╟
U+256x	╠	╡	╢	╣	╤	╥	╦	╧	╨	╩	╪	╫	╬	╭	╮	╯
U+257x	╰	╱	╲	╳	╴	╵	╶	╷	╸	╹	╺	╻	╼	╽	╾	╿
--]]
--- The keys are strings representing which sides the cosrosponding character
--- is connected to, and in what style: [l]eft, [r]ight, [t]op and [b]ottom
--- for the direction(s), optionally followed by one of the style indicators
--- [N]ormal, [B]old, [D]ouble or [S]mooth. If the style indicator is followed
--- by a number between 2 and 4, it means that it is a dashed / dotted symbol
--- instead of a complete / unobstructed line, with that amount of sections.
--- Each direction is seperated by an underscore. They are sorted as cardinal
--- directions, so the order is top, right, bottom and then left.
---
--- TODO: Complete this character set.
const charset = {
	t:       "╵"
	t_r:     "└"
	t_r_b:   "├"
	t_r_b_l: "┼"
	t_r_l:   "┴"
	t_b:     "│"
	t_b_l:   "┤"
	t_l:     "┘"
	r:       "╶"
	r_b:     "┌"
	r_b_l:   "┬"
	r_l:     "─"
	b:       "╷"
	b_l:     "┐"
	l:       "╴"

	--[[
	tB:    "╹"
	t_rB:  "┕"
	tB_r:  "┖"
	tB_rB: "┗"
	t_bB:  "╽"
	tB_b:  "╿"
	tB_bB: "┃"
	t_lB:  "┙"
	tB_l:  "┚"
	tB_lB: "┛"
	r:   "╶"
	r_b: "┌"
	r_l: "─"
	b:   "╷"
	b_l: "┐"
	l:   "╴"
	--]]
}

---@alias BoxCharStyle
---| nil
---| boolean
---| "normal"
---| "bold"
---| "double"
---| "smooth"
---| 2
---| 3
---| 4
--- TODO: Complete this function, after finishing `charset`.
---@param styles { ["top"|"right"|"bottom"|"left"]: BoxCharStyle }
---@return string
export get_box_char = (styles={}) ->
	assert(type(styles) == "table")

	if next(styles, nil) == nil
		return ""

	local key_parts = ["", "", "", ""]

	for i, side in ipairs(["top", "right", "bottom", "left"])
		const style = styles[side]

		switch style
			when nil, false
				-- pass
			when true, "normal"
				key_parts[i] = side::sub(1, 1)
			when "bold"
				error("TODO: Implement style == \"bold\" for get_box_char()")
			when "double"
				error("TODO: Implement style == \"double\" for get_box_char()")
			when "smooth"
				error("TODO: Implement style == \"smooth\" for get_box_char()")
			when 2
				error("TODO: Implement style == 2 for get_box_char()")
			when 3
				error("TODO: Implement style == 3 for get_box_char()")
			when 4
				error("TODO: Implement style == 4 for get_box_char()")
			else
				error("Invalid box character style %q!"::format(
					tostring(style)
				))

	assert(charset[table.concat(
		[i for i in *key_parts when i != ""],
		"_",
	)])



const wrap_text = (str, width) ->
	assert(type(str)   == "string")
	assert(type(width) == "number")

	const chars = get_utf8_chars(str)
	--require("yue").p(chars)

	local index = 1
	local display_width = 0
	const lines = { "" }

	for i, char in ipairs(chars)
		if char == "\n"
			index += 1
			lines[index] = ""
			continue

		const temp = get_char_display_width(char)
		const new_display_width = display_width + temp

		if new_display_width > width
			index += 1
			display_width = temp
			lines[index] = char
		else
			display_width = new_display_width
			lines[index] ..= char

	print("[" .. "-"::rep(width) .. "]")
	table.concat(
		["[" .. line .. "]" for line in *lines],
		"\n",
	)


export class Table
	new: (
		@rows=[],
		columns,
	) =>
		@columns = if columns?
			columns
		elseif row := @rows[1]
			[k for k, v in pairs(row)]
		else
			[]

	add_row: (row) =>
		assert(type(row) == "table")

		@columns ??= [k for k, v in pairs(row)]

		@rows[] = row

	render: (options={}) =>
		with options
			.width ??= do
				const f = assert(io.popen("tput cols"))
				const output = f::read("*a")
				f::close()
				assert(tonumber(output::match("%d*"))) - 1

		const column_width = math.floor((options.width - 2) / #@columns)

		const top, right, bottom, left = true, true, true, true

		local result = ""

		const hr = get_box_char({ :right, :left })::rep(column_width)
		result ..= (
			get_box_char({ :right, :bottom }) ..
			table.concat(
				[hr for i = 1, #@columns],
				get_box_char({ :left, :bottom, :right }),
			) ..
			get_box_char({ :bottom, :left }) ..
			"\n"
		)

		result ..= get_box_char({ :top, :bottom })

		for i, col in ipairs(@columns)
			col = tostring(col)
			result ..= (
				col ..
				" "::rep(column_width - #col)
			)

			if i < #@columns
				result ..= get_box_char({ :top, :bottom })

		result ..= get_box_char({ :top, :bottom }) .. "\n"

		--for row in *@rows
		--	for col in *@columns

		result ..= (
			get_box_char({ :right, :top }) ..
			get_box_char({ :right, :left })::rep(options.width - 2) ..
			get_box_char({ :top, :left })
		)

		result


export main = (argv=arg) ->
	print("Hello from %q:%d"::format($FILE, $LINE))

	print()
	print(wrap_text("Hello, world! 😊 "::rep(20), 30))
	print()

	--for k, v in pairs(charset)
	--	print(k, v)

	const top, right, bottom, left = true, true, true, true

	const p = (...) ->
		const box_char = get_box_char(...)
		print("%q (#%d --> [%s])"::format(box_char, #box_char, table.concat(
			["0x%02x"::format(byte) for byte in *{ box_char::byte(1, #box_char) }],
			", "
		)))

	p({})
	p({ :top, :bottom })
	p({ :left, :right })
	p({ :top, :left, :right })

	print()

	const test_table = Table({
		{ x: "foo", y: "bar" },
		{ x: "biz", y: "baz" },
		{ x: "lua", y: "yue" },
	})
	print(test_table::render())


if select("#", ...) == 0
	os.exit(main())
