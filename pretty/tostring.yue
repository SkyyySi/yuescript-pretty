#!/usr/bin/env yue
--- SPDX-License-Identifier: 0BSD

from _G import type, error, assert, print, tostring, ipairs, io, os, debug, table, string, getmetatable, setmetatable

const { getinfo: debug_getinfo, getlocal: debug_getlocal } = debug

import "pretty.util"
import "pretty.color"


export renderers = {}


renderers.nil = (value, options={}) ->
	options.nil_base_color ??= { fg: "red", effects: { italic: true } }

	color.set(options.nil_base_color, options) ..
	"nil" ..
	color.reset(options.nil_base_color, options)


renderers.boolean = (value, options={}) ->
	--options.boolean_base_color ??= { fg: "blue" }
	options.boolean_true_base_color ??= options.boolean_base_color ?? { fg: "green", effects: { strong: true } }
	options.boolean_false_base_color ??= options.boolean_base_color ?? { fg: "red", effects: { strong: true } }

	const this_str, this_color = if value
		"true", options.boolean_true_base_color
	else
		"false", options.boolean_false_base_color

	color.set(this_color, options) ..
	this_str ..
	color.reset(this_color, options)


renderers.number = (value, options={}) ->
	options.number_base_color ??= { fg: "blue" }

	color.set(options.number_base_color, options) ..
	"%.15g"::format(value) ..
	color.reset(options.number_base_color, options)


renderers.string = (value, options={}) ->
	options.string_base_color ??= { fg: "yellow" }

	color.set(options.string_base_color, options) ..
	util.quote(value) ..
	color.reset(options.string_base_color, options)


const get_parameter_names = (f) ->
	const result = []

	local i = 0
	while true
		i += 1

		const name = debug_getlocal(f, i)

		if name == nil
			break

		result[] = name

	if debug_getinfo(f).isvararg
		result[] = "..."

	result


renderers.function = (value, options={}) ->
	const info = debug_getinfo(value)

	const { :nparams, :isvararg, :name } = info

	const address = "%p"::format(value)

	color.set({ fg: "magenta" }, options) ..
	"function" ..
	color.set({ fg: "reset" }, options) .. (if name?
		" " ..
		name
	else
		""
	) ..
	"(" ..
	table.concat(get_parameter_names(value), ", ") ..
	")"


renderers.thread = (value, options={}) ->
	tostring(value)


renderers.userdata = (value, options={}) ->
	tostring(value)


renderers.cdata = (value, options={}) ->
	tostring(value)


renderers.table = (value, options={}) ->
	tostring(value)


export render = (value, options) ->
	renderers[type(value)](value, options)


export.<call> = (...) =>
	render(...)


export main = (argv=arg) ->
	print(render(nil))

	print(render(true))
	print(render(false))

	print(render(420.69))

	print(render("Hello, world!"))

	print(render((a, b, c, ...) ->))

	print(render(coroutine.create(->)))

	try
		import "lpeg"
		print(render(lpeg.P"xyz"))

	try
		import "ffi"
		print(render(ffi.new("int64_t")))

	print(render({
		"x", "y", "z",
		a: "b",
		{ foo: "bar", "Some complex key": "value" },
		["first", "second", "third", "fourth"],
	}))


if select("#", ...) == 0
	os.exit(main())
