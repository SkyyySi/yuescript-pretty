#!/usr/bin/env yue
--- SPDX-License-Identifier: 0BSD

from _G import type, error, assert, print, tostring, ipairs, io, os, debug, table, string, getmetatable, setmetatable

const { getinfo: debug_getinfo, getlocal: debug_getlocal } = debug

import "pretty.util"
import "pretty.color"


export renderers = {}


export render = (value, options={}) ->
	renderers[type(value)](value, options)


renderers.nil = (value, options={}) ->
	with options
		.nil_base_color ??= { fg: "red", effects: { italic: true } }

	color.with_string("nil", options.nil_base_color, options)


renderers.boolean = (value, options={}) ->
	with options
		--.boolean_base_color ??= { fg: "blue" }
		.boolean_true_base_color ??= .boolean_base_color ?? { fg: "green", effects: { strong: true } }
		.boolean_false_base_color ??= .boolean_base_color ?? { fg: "red", effects: { strong: true } }

	const this_str, this_color = if value
		"true", options.boolean_true_base_color
	else
		"false", options.boolean_false_base_color

	color.with_string(this_str, this_color, options)


renderers.number = (value, options={}) ->
	with options
		.number_base_color ??= { fg: "blue" }

	color.with_string("%.15g"::format(value), options.number_base_color, options)


renderers.string = (value, options={}) ->
	with options
		.string_base_color ??= { fg: "yellow" }

	color.with_string(util.quote(value), options.string_base_color, options)


const get_parameter_names = (f) ->
	const result = []

	local i = 0
	while true
		i += 1

		const name = debug_getlocal(f, i)

		if name == nil
			break

		result[] = name

	if debug_getinfo(f).isvararg
		result[] = "..."

	result


renderers.function = (value, options={}) ->
	with options
		.function_keyword_color ??= { fg: "magenta" }
		.function_name_color ??= {}
		.function_parenthesis_color ??= {}
		.function_opening_parenthesis_color ??= .function_parenthesis_color ?? {}
		.function_closinging_parenthesis_color ??= .function_parenthesis_color ?? {}
		.function_parameter_name_color ??= {}
		.function_parameter_delimiter_color ??= {}

	const apply_color = (str, color_identifier) ->
		color.with_string(str, options["function_" .. color_identifier], options)

	const { :nparams, :isvararg, :name } = debug_getinfo(value)

	--- Only works in Lua 5.2 and onwards as well as LuaJIT, but not in Lua 5.1
	const has_address, address = pcall(((f) -> "%p"::format(f)), f)

	apply_color("function", "keyword_color") ..
	(name? and " " .. apply_color(name, "name_color") or "") ..
	apply_color("(", "opening_parenthesis_color") ..
	table.concat(
		[apply_color(name, "parameter_name_color") for name in *get_parameter_names(value)],
		(apply_color(",", "parameter_delimiter_color") .. " "),
	) ..
	apply_color(")", "closing_parenthesis_color") ..
	(has_address and " at %p"::format(value) or "")


renderers.thread = (value, options={}) ->
	tostring(value)


renderers.userdata = (value, options={}) ->
	tostring(value)


renderers.cdata = (value, options={}) ->
	tostring(value)


const table_is_array = (tb) ->
	const length = #tb

	local last_key = 0
	local count = 0
	for k, v in pairs(tb)
		if type(k) != "number"
			return false

		if k != (last_key + 1)
			return false

		last_key = k
		count += 1

	count == length


renderers.table = (value, options={}) ->
	with options
		.depth ??= 0
		.get_indent ??= (depth) ->
			if depth < 0
				error("Invalid block depth (expected >= 0, got: #{depth})")
			elseif depth == 0
				""
			elseif depth == 1
				"    "
			else
				"    " .. table.concat(["\027[2;3#{((i - 1) % 8)+ 1}mâ”‚\027[22;39m   " for i = 2, depth])
		.indent_cache ??= []

	if next(value, nil) == nil
		return "{}"

	const is_array = table_is_array(value)
	const depth = options.depth
	const get_indent_cached = (depth) ->
		if cached := options.indent_cache[depth]
			cached
		else
			const temp = options.get_indent(depth)
			options.indent_cache[depth] = temp
			temp
	const indent = get_indent_cached(depth)
	const child_indent = get_indent_cached(depth + 1)

	options.depth += 1

	local result = is_array and "[\n" or "{\n"

	for k, v in pairs(value)
		result ..= (
			child_indent ..
			(is_array and "" or ("[" .. render(k, options) .. "]: ")) ..
			render(v, options) ..
			(next(value, k) == nil and "\n" or ",\n")
		)

	result ..= indent .. (is_array and "]" or "}")

	options.depth -= 1

	result


export.<call> = (...) =>
	render(...)


export main = (argv=arg) ->
	print(render(nil))

	print(render(true))
	print(render(false))

	print(render(420.69))

	print(render("Hello, world!"))

	print(render((a, b, c, ...) ->))

	print(render(coroutine.create(->)))

	try
		import "lpeg"
		print(render(lpeg.P"xyz"))

	try
		import "ffi"
		print(render(ffi.new("int64_t")))

	print(render({
		"x", "y", "z",
		a: "b",
		{ foo: "bar", "Some complex key": "value" },
		["first", "second", "third", "fourth"],
	}))


if select("#", ...) == 0
	os.exit(main())
